{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getProfile: () => api.get('/auth/me'),\n  changePassword: passwords => api.put('/auth/change-password', passwords)\n};\nexport const ticketsAPI = {\n  getTickets: params => api.get('/tickets', {\n    params\n  }),\n  getTicket: id => api.get(`/tickets/${id}`),\n  createTicket: ticketData => api.post('/tickets', ticketData),\n  updateTicket: (id, ticketData) => api.put(`/tickets/${id}`, ticketData),\n  addComment: (id, commentData) => api.post(`/tickets/${id}/comments`, commentData),\n  getStats: () => api.get('/tickets/stats/overview')\n};\nexport const usersAPI = {\n  getUsers: params => api.get('/users', {\n    params\n  }),\n  getAgents: () => api.get('/users/agents'),\n  getUser: id => api.get(`/users/${id}`),\n  updateUser: (id, userData) => api.put(`/users/${id}`, userData),\n  updateUserRole: (id, role) => api.put(`/users/${id}/role`, {\n    role\n  }),\n  getUserStats: id => api.get(`/users/${id}/stats`)\n};\nexport const notificationsAPI = {\n  getNotifications: params => api.get('/notifications', {\n    params\n  }),\n  markAsRead: id => api.put(`/notifications/${id}/read`),\n  markAllAsRead: () => api.put('/notifications/read-all'),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n  deleteNotification: id => api.delete(`/notifications/${id}`)\n};\nexport const aiAPI = {\n  categorizeTicket: data => api.post('/ai/categorize', data),\n  getSuggestions: data => api.post('/ai/suggestions', data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","getProfile","get","changePassword","passwords","put","ticketsAPI","getTickets","params","getTicket","id","createTicket","ticketData","updateTicket","addComment","commentData","getStats","usersAPI","getUsers","getAgents","getUser","updateUser","updateUserRole","role","getUserStats","notificationsAPI","getNotifications","markAsRead","markAllAsRead","getUnreadCount","deleteNotification","delete","aiAPI","categorizeTicket","data","getSuggestions"],"sources":["D:/place/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API endpoints\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  getProfile: () => api.get('/auth/me'),\r\n  changePassword: (passwords) => api.put('/auth/change-password', passwords),\r\n};\r\n\r\nexport const ticketsAPI = {\r\n  getTickets: (params) => api.get('/tickets', { params }),\r\n  getTicket: (id) => api.get(`/tickets/${id}`),\r\n  createTicket: (ticketData) => api.post('/tickets', ticketData),\r\n  updateTicket: (id, ticketData) => api.put(`/tickets/${id}`, ticketData),\r\n  addComment: (id, commentData) => api.post(`/tickets/${id}/comments`, commentData),\r\n  getStats: () => api.get('/tickets/stats/overview'),\r\n};\r\n\r\nexport const usersAPI = {\r\n  getUsers: (params) => api.get('/users', { params }),\r\n  getAgents: () => api.get('/users/agents'),\r\n  getUser: (id) => api.get(`/users/${id}`),\r\n  updateUser: (id, userData) => api.put(`/users/${id}`, userData),\r\n  updateUserRole: (id, role) => api.put(`/users/${id}/role`, { role }),\r\n  getUserStats: (id) => api.get(`/users/${id}/stats`),\r\n};\r\n\r\nexport const notificationsAPI = {\r\n  getNotifications: (params) => api.get('/notifications', { params }),\r\n  markAsRead: (id) => api.put(`/notifications/${id}/read`),\r\n  markAllAsRead: () => api.put('/notifications/read-all'),\r\n  getUnreadCount: () => api.get('/notifications/unread-count'),\r\n  deleteNotification: (id) => api.delete(`/notifications/${id}`),\r\n};\r\n\r\nexport const aiAPI = {\r\n  categorizeTicket: (data) => api.post('/ai/categorize', data),\r\n  getSuggestions: (data) => api.post('/ai/suggestions', data),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}