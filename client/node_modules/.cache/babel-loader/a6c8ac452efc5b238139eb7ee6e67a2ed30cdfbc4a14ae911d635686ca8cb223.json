{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { notificationsAPI } from '../services/api';\nimport toast from 'react-hot-toast';\nexport const useNotifications = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const [notificationsResponse, unreadResponse] = await Promise.all([notificationsAPI.getNotifications({\n        limit: 20\n      }), notificationsAPI.getUnreadCount()]);\n      setNotifications(notificationsResponse.data.notifications);\n      setUnreadCount(unreadResponse.data.count);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      toast.error('Failed to load notifications');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      await notificationsAPI.markAsRead(notificationId);\n      setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n        ...notification,\n        is_read: true\n      } : notification));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      toast.error('Failed to mark notification as read');\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      await notificationsAPI.markAllAsRead();\n      setNotifications(prev => prev.map(notification => ({\n        ...notification,\n        is_read: true\n      })));\n      setUnreadCount(0);\n      toast.success('All notifications marked as read');\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      toast.error('Failed to mark all notifications as read');\n    }\n  };\n  const deleteNotification = async notificationId => {\n    try {\n      await notificationsAPI.deleteNotification(notificationId);\n      setNotifications(prev => prev.filter(notification => notification.id !== notificationId));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n      toast.error('Failed to delete notification');\n    }\n  };\n  useEffect(() => {\n    fetchNotifications();\n\n    // Poll for new notifications every 30 seconds\n    const interval = setInterval(fetchNotifications, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    notifications,\n    unreadCount,\n    loading,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    refreshNotifications: fetchNotifications\n  };\n};\n_s(useNotifications, \"NwEYV34+L+WtKEgexV6tbt04fKk=\");","map":{"version":3,"names":["useState","useEffect","notificationsAPI","toast","useNotifications","_s","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","fetchNotifications","notificationsResponse","unreadResponse","Promise","all","getNotifications","limit","getUnreadCount","data","count","error","console","markAsRead","notificationId","prev","map","notification","id","is_read","Math","max","markAllAsRead","success","deleteNotification","filter","interval","setInterval","clearInterval","refreshNotifications"],"sources":["D:/place/client/src/hooks/useNotifications.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { notificationsAPI } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nexport const useNotifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [notificationsResponse, unreadResponse] = await Promise.all([\r\n        notificationsAPI.getNotifications({ limit: 20 }),\r\n        notificationsAPI.getUnreadCount()\r\n      ]);\r\n      \r\n      setNotifications(notificationsResponse.data.notifications);\r\n      setUnreadCount(unreadResponse.data.count);\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      toast.error('Failed to load notifications');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await notificationsAPI.markAsRead(notificationId);\r\n      setNotifications(prev => \r\n        prev.map(notification => \r\n          notification.id === notificationId \r\n            ? { ...notification, is_read: true }\r\n            : notification\r\n        )\r\n      );\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n      toast.error('Failed to mark notification as read');\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await notificationsAPI.markAllAsRead();\r\n      setNotifications(prev => \r\n        prev.map(notification => ({ ...notification, is_read: true }))\r\n      );\r\n      setUnreadCount(0);\r\n      toast.success('All notifications marked as read');\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n      toast.error('Failed to mark all notifications as read');\r\n    }\r\n  };\r\n\r\n  const deleteNotification = async (notificationId) => {\r\n    try {\r\n      await notificationsAPI.deleteNotification(notificationId);\r\n      setNotifications(prev => \r\n        prev.filter(notification => notification.id !== notificationId)\r\n      );\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n    } catch (error) {\r\n      console.error('Error deleting notification:', error);\r\n      toast.error('Failed to delete notification');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n    \r\n    // Poll for new notifications every 30 seconds\r\n    const interval = setInterval(fetchNotifications, 30000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return {\r\n    notifications,\r\n    unreadCount,\r\n    loading,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    refreshNotifications: fetchNotifications\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}